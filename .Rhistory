epochs = epochs,
validation_split = 0.2
)
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_test <- (x_test_in + 1)/2
x_test <- array(x_test,dim=c(nrow(x_test),561,1))
input_shape <- c(561, 1)
dim(x_train)
dim(x_test)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_test <- (x_test_in + 1)/2
x_test <- array(x_test,dim=c(nrow(x_test),561,1))
x_train <- array_reshape(x_train,c=(nrow(x_train),561,1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_test <- (x_test_in + 1)/2
x_test <- array(x_test,dim=c(nrow(x_test),561,1))
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
mnist <- dataset_mnist()
x_train_sample <- mnist$train$x
y_train_sample <- mnist$train$y
x_test_sample <- mnist$test$x
y_test_sample <- mnist$test$y
dim(x_train_sample)
img_rows <- 28
img_cols <- 28
x_train_sample2 <- array_reshape(x_train_sample,
c(nrow(x_train_sample),
img_rows,
img_cols, 1))
x_test_Sample2 <- array_reshape(x_test_sample,
c(nrow(x_test_sample),
img_rows,
img_cols, 1))
input_shape <- c(img_rows,
img_cols, 1)
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_train <- as.array(x_train)
x_test <- (x_test_in + 1)/2
x_test <- array(x_test,dim=c(nrow(x_test),561,1))
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_train <- as.array(x_train)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_train <- as.list(x_train)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_train2 <- as.list(x_train)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(nrow(x_train),561,1))
x_train2 <- as.list(x_train)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(7352))
x_train2 <- as.list(x_train)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- array(x_train,dim=c(5000))
x_train2 <- as.list(x_train)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_train3 <- array(x_train,dim=c(5000))
x_train2 <- as.list(x_train)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_train3 <- array(x_train,dim=c(5000))
x_train2 <- t(x_train)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_train3 <- array(x_train,dim=c(nrow(train)))
x_train <- (x_train_in +1)/2
x_train3 <- array(x_train,dim=c(nrow(x_train)))
x_train2 <- t(x_train3)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_datafram <- as.data.frame(x_train)
x_train3 <- array(x_train,dim=c(nrow(x_train)))
x_train2 <- t(x_train3)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
x_datafram <- as.data.frame(x_train)
x_d2 <- (x_datafram)
x_train3 <- array(x_train,dim=c(nrow(x_train)))
x_train2 <- t(x_train3)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
x_train <- (x_train_in +1)/2
output <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_datafram <- as.data.frame(x_train)
x_d2 <- (x_datafram)
x_train3 <- array(x_train,dim=c(nrow(x_train)))
x_train2 <- t(x_train3)
x_train <- array_reshape(x_train_in,
c(nrow(x_train_in),
561,
1))
View(x_d2)
x_train <- (x_train_in +1)/2
x_train <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_train3 <- array(x_train,dim=c(nrow(x_train)))
x_train2 <- t(x_train3)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_test <- (x_test_in + 1)/2
x_test <- array(x_test,dim=c(nrow(x_test),561,1))
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
x_train <- (x_train_in +1)/2
x_train <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_test <- (x_test_in + 1)/2
x_test <- matrix(unlist(x_test), ncol = 561, byrow = TRUE)
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
input_shape <- c(561, 1)
dim(x_train)
dim(x_test)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
#devtools::install_github("rstudio/keras")
library(keras)
#install_keras()
x_train_in = read.table(file = "UCI HAR Dataset/train/X_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_train_in = read.table(file = "UCI HAR Dataset/train/y_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
x_test_in = read.table(file = "UCI HAR Dataset/test/X_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_test_in = read.table(file = "UCI HAR Dataset/test/y_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
head(x_train_in)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
y_test<-as.array(y_test[,1])
y_train<-as.array(y_train[,1])
y_train <- to_categorical(y_train)
y_test <- to_categorical(y_test)
x_train <- (x_train_in +1)/2
x_train <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_test <- (x_test_in + 1)/2
x_test <- matrix(unlist(x_test), ncol = 561, byrow = TRUE)
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
input_shape <- c(561, 1)
dim(x_train)
dim(x_test)
input_shape <- c(561,1)
num_classes <-5
head(y_train)
model <- keras_model_sequential() %>%
layer_conv_1d(filters = 16,
kernel_size = c(3),
activation = 'relu',
input_shape = input_shape) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 10,
activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = num_classes,
activation = 'softmax')
model %>% compile(
loss = loss_categorical_crossentropy,
optimizer = optimizer_adadelta(),
metrics = c('accuracy')
)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
#devtools::install_github("rstudio/keras")
library(keras)
#install_keras()
x_train_in = read.table(file = "UCI HAR Dataset/train/X_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_train_in = read.table(file = "UCI HAR Dataset/train/y_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
x_test_in = read.table(file = "UCI HAR Dataset/test/X_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_test_in = read.table(file = "UCI HAR Dataset/test/y_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
head(x_train_in)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
y_test<-as.array(y_test[,1])
y_train<-as.array(y_train[,1])
y_train <- to_categorical(y_train)
y_test <- to_categorical(y_test)
dim(y_train)
dim(y_test)
x_train <- (x_train_in +1)/2
x_train <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_test <- (x_test_in + 1)/2
x_test <- matrix(unlist(x_test), ncol = 561, byrow = TRUE)
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
input_shape <- c(561, 1)
dim(x_train)
dim(x_test)
input_shape <- c(561,1)
num_classes <-5
head(y_train)
model <- keras_model_sequential() %>%
layer_conv_1d(filters = 16,
kernel_size = c(3),
activation = 'relu',
input_shape = input_shape) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 10,
activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = num_classes,
activation = 'softmax')
model %>% compile(
loss = loss_categorical_crossentropy,
optimizer = optimizer_adadelta(),
metrics = c('accuracy')
)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
View(y_train)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
#y_test<-as.array(y_test[,1])
y_test<-matrix(unlist(y_test), ncol = 1, byrow = TRUE)
#y_train<-as.array(y_train[,1])
y_train<-matrix(unlist(y_train), ncol = 1, byrow = TRUE)
mnist <- dataset_mnist()
x_train_sample <- mnist$train$x
y_train_sample <- mnist$train$y
x_test_sample <- mnist$test$x
y_test_sample <- mnist$test$y
dim(x_train_sample)
img_rows <- 28
img_cols <- 28
x_train_sample2 <- array_reshape(x_train_sample,
c(nrow(x_train_sample),
img_rows,
img_cols, 1))
x_test_Sample2 <- array_reshape(x_test_sample,
c(nrow(x_test_sample),
img_rows,
img_cols, 1))
input_shape <- c(img_rows,
img_cols, 1)
dim(x_test_Sample2)
#devtools::install_github("rstudio/keras")
library(keras)
#install_keras()
x_train_in = read.table(file = "UCI HAR Dataset/train/X_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_train_in = read.table(file = "UCI HAR Dataset/train/y_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
x_test_in = read.table(file = "UCI HAR Dataset/test/X_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_test_in = read.table(file = "UCI HAR Dataset/test/y_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
head(x_train_in)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
y_test<-as.array(y_test[,1])
#y_test<-matrix(unlist(y_test), ncol = 1, byrow = TRUE)
y_train<-as.array(y_train[,1])
#y_train<-matrix(unlist(y_train), ncol = 1, byrow = TRUE)
y_train <- to_categorical(y_train)
y_test <- to_categorical(y_test)
dim(y_train)
dim(y_test)
x_train <- (x_train_in +1)/2
x_train <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_test <- (x_test_in + 1)/2
x_test <- matrix(unlist(x_test), ncol = 561, byrow = TRUE)
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
input_shape <- c(561, 1)
dim(x_train)
dim(x_test)
input_shape <- c(561,1)
num_classes <-5
head(y_train)
model <- keras_model_sequential() %>%
layer_conv_1d(filters = 16,
kernel_size = c(3),
activation = 'relu',
input_shape = input_shape) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 10,
activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = num_classes,
activation = 'softmax')
model %>% compile(
loss = loss_categorical_crossentropy,
optimizer = optimizer_adadelta(),
metrics = c('accuracy')
)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
y_train <- to_categorical(y_train,5)
y_test <- to_categorical(y_test,5)
dim(y_train)
dim(y_test)
#devtools::install_github("rstudio/keras")
library(keras)
#install_keras()
x_train_in = read.table(file = "UCI HAR Dataset/train/X_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_train_in = read.table(file = "UCI HAR Dataset/train/y_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
x_test_in = read.table(file = "UCI HAR Dataset/test/X_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_test_in = read.table(file = "UCI HAR Dataset/test/y_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
head(x_train_in)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
y_test<-as.array(y_test[,1])
#y_test<-matrix(unlist(y_test), ncol = 1, byrow = TRUE)
y_train<-as.array(y_train[,1])
#y_train<-matrix(unlist(y_train), ncol = 1, byrow = TRUE)
y_train <- to_categorical(y_train,5)
#devtools::install_github("rstudio/keras")
library(keras)
#install_keras()
x_train_in = read.table(file = "UCI HAR Dataset/train/X_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_train_in = read.table(file = "UCI HAR Dataset/train/y_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
x_test_in = read.table(file = "UCI HAR Dataset/test/X_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_test_in = read.table(file = "UCI HAR Dataset/test/y_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
head(x_train_in)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
y_test<-as.array(y_test[,1])
#y_test<-matrix(unlist(y_test), ncol = 1, byrow = TRUE)
y_train<-as.array(y_train[,1])
#y_train<-matrix(unlist(y_train), ncol = 1, byrow = TRUE)
y_train <- to_categorical(y_train,4)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
score <- model %>% evaluate(x_test,
y_test)
cat('Test loss: ', score$loss, "\n")
cat('Test accuracy: ', score$acc, "\n")
#devtools::install_github("rstudio/keras")
library(keras)
#install_keras()
x_train_in = read.table(file = "UCI HAR Dataset/train/X_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_train_in = read.table(file = "UCI HAR Dataset/train/y_train.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
x_test_in = read.table(file = "UCI HAR Dataset/test/X_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
y_test_in = read.table(file = "UCI HAR Dataset/test/y_test.txt", sep = "" , header = F , na.strings ="", stringsAsFactors= F)
head(x_train_in)
#convert y in useable data
y_test <- y_test_in -1
y_train <- y_train_in -1
y_test<-as.array(y_test[,1])
y_train<-as.array(y_train[,1])
dim(y_train)
dim(y_test)
x_train <- (x_train_in +1)/2
x_train <- matrix(unlist(x_train), ncol = 561, byrow = TRUE)
x_train <- array_reshape(x_train,
c(nrow(x_train),
561,
1))
x_test <- (x_test_in + 1)/2
x_test <- matrix(unlist(x_test), ncol = 561, byrow = TRUE)
x_test <- array_reshape(x_test,
c(nrow(x_test),
561,
1))
input_shape <- c(561, 1)
dim(x_train)
dim(x_test)
input_shape <- c(561,1)
num_classes <-5
head(y_train)
model <- keras_model_sequential() %>%
layer_conv_1d(filters = 16,
kernel_size = c(3),
activation = 'relu',
input_shape = input_shape) %>%
layer_dropout(rate = 0.25) %>%
layer_flatten() %>%
layer_dense(units = 10,
activation = 'relu') %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = num_classes,
activation = 'softmax')
model %>% compile(
loss = loss_categorical_crossentropy,
optimizer = optimizer_adadelta(),
metrics = c('accuracy')
)
batch_size <- 128
epochs <- 12
# Train model
model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
validation_split = 0.2
)
score <- model %>% evaluate(x_test,
y_test)
cat('Test loss: ', score$loss, "\n")
cat('Test accuracy: ', score$acc, "\n")
